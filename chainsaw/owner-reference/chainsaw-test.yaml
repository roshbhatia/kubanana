apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: owner-reference
spec:
  steps:
  - name: create-template-with-uid
    try:
    - apply:
        file: ../resources/owner-reference-template.yaml
    - assert:
        file: ../resources/owner-reference-template.yaml
    
  - name: capture-template-uid
    try:
    - script:
        content: |
          #!/bin/bash
          # Store the UID of the template for later verification
          TEMPLATE_UID=$(kubectl get EventTriggeredJob -n default owner-reference-template -o jsonpath='{.metadata.uid}')
          echo "Template UID: $TEMPLATE_UID"
          # Store this value for later steps
          echo "TEMPLATE_UID=$TEMPLATE_UID" > /tmp/template_uid.env
  
  - name: create-pod-to-trigger-job
    try:
    - apply:
        file: ../resources/test-pod-for-owner.yaml
    - assert:
        file: ../resources/test-pod-for-owner.yaml
    
  - name: verify-job-owner-reference
    try:
    - script:
        content: |
          #!/bin/bash
          set -e
          # Get the saved UID
          source /tmp/template_uid.env
          
          # Wait for job to be created (might take a second)
          sleep 5
          
          # Find job created by the template
          JOB_NAME=$(kubectl get jobs -n default -l kubevent-template=owner-reference-template -o jsonpath='{.items[0].metadata.name}')
          echo "Found job: $JOB_NAME"
          
          # Verify the owner reference UID matches the template UID
          JOB_OWNER_UID=$(kubectl get job $JOB_NAME -n default -o jsonpath='{.metadata.ownerReferences[0].uid}')
          echo "Job owner UID: $JOB_OWNER_UID"
          echo "Template UID: $TEMPLATE_UID"
          
          # Verify match
          if [ "$JOB_OWNER_UID" = "$TEMPLATE_UID" ]; then
            echo "Owner reference UID matches template UID"
            exit 0
          else
            echo "Owner reference UID does not match template UID"
            exit 1
          fi